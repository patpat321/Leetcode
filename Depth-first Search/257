"""
Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        if not root:
            return []
        stack = [[root, [str(root.val)]]]
        out = []
        while stack:
            node, res = stack.pop()
            if node.left == None and node.right == None:
                out.append('->'.join(res))
            if node.left:
                stack.append([node.left, res+[str(node.left.val)]])
            if node.right:
                stack.append([node.right, res+[str(node.right.val)]])
        return out
